// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// Availability Zone
type AvailabilityZone string

const (
	// Internal zone for customer workloads
	AvailabilityZoneWxDus1 AvailabilityZone = "wx_dus_1"
	// Internal zone for customer workloads
	AvailabilityZoneWxDus2 AvailabilityZone = "wx_dus_2"
	// Internal zone for customer workloads
	AvailabilityZoneWxDus3 AvailabilityZone = "wx_dus_3"
	// Public zone
	AvailabilityZoneWxDus AvailabilityZone = "wx_dus"
	// Unknown zone
	AvailabilityZoneUnknown AvailabilityZone = "UNKNOWN"
)

// Floating Group Vm Input
type FloatingGroupVmInput struct {
	// Priority of vm (will be relevant later)
	Priority int `json:"priority"`
	// Id of vm
	Vm string `json:"vm"`
}

// GetPriority returns FloatingGroupVmInput.Priority, and is useful for accessing the field via an interface.
func (v *FloatingGroupVmInput) GetPriority() int { return v.Priority }

// GetVm returns FloatingGroupVmInput.Vm, and is useful for accessing the field via an interface.
func (v *FloatingGroupVmInput) GetVm() string { return v.Vm }

// Status of an instance
type InstanceStatus string

const (
	// Instance is running
	InstanceStatusRunning InstanceStatus = "RUNNING"
	// Instance is created
	InstanceStatusBuild InstanceStatus = "BUILD"
	// Instance is stopped
	InstanceStatusStopped InstanceStatus = "STOPPED"
	// Instance was deleted
	InstanceStatusDeleted InstanceStatus = "DELETED"
	// Instance has an error state
	InstanceStatusError InstanceStatus = "ERROR"
	// Instance is rebooting
	InstanceStatusReboot InstanceStatus = "REBOOT"
	// Instance is getting rebuilded
	InstanceStatusRebuild InstanceStatus = "REBUILD"
	// Instance is shut off
	InstanceStatusShutoff InstanceStatus = "SHUTOFF"
	// Instance is suspended
	InstanceStatusSuspended InstanceStatus = "SUSPENDED"
	// Instance status is updating
	InstanceStatusUpdating InstanceStatus = "UPDATING"
	// Instance status is not known
	InstanceStatusUnknown InstanceStatus = "UNKNOWN"
)

// Subnet Input
type SubnetInput struct {
	// Name
	Name string `json:"name"`
	// IP Version
	IpVersion string `json:"ipVersion"`
	// CIDR
	Cidr string `json:"cidr"`
}

// GetName returns SubnetInput.Name, and is useful for accessing the field via an interface.
func (v *SubnetInput) GetName() string { return v.Name }

// GetIpVersion returns SubnetInput.IpVersion, and is useful for accessing the field via an interface.
func (v *SubnetInput) GetIpVersion() string { return v.IpVersion }

// GetCidr returns SubnetInput.Cidr, and is useful for accessing the field via an interface.
func (v *SubnetInput) GetCidr() string { return v.Cidr }

// __createFloatingGroupInput is used internally by genqlient
type __createFloatingGroupInput struct {
	Id                string                 `json:"id"`
	ProjectId         string                 `json:"projectId"`
	Vms               []FloatingGroupVmInput `json:"vms"`
	NatToVmsPrivateIp bool                   `json:"natToVmsPrivateIp"`
}

// GetId returns __createFloatingGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__createFloatingGroupInput) GetId() string { return v.Id }

// GetProjectId returns __createFloatingGroupInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__createFloatingGroupInput) GetProjectId() string { return v.ProjectId }

// GetVms returns __createFloatingGroupInput.Vms, and is useful for accessing the field via an interface.
func (v *__createFloatingGroupInput) GetVms() []FloatingGroupVmInput { return v.Vms }

// GetNatToVmsPrivateIp returns __createFloatingGroupInput.NatToVmsPrivateIp, and is useful for accessing the field via an interface.
func (v *__createFloatingGroupInput) GetNatToVmsPrivateIp() bool { return v.NatToVmsPrivateIp }

// __createFloatingIPInput is used internally by genqlient
type __createFloatingIPInput struct {
	ProjectId string `json:"projectId"`
}

// GetProjectId returns __createFloatingIPInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__createFloatingIPInput) GetProjectId() string { return v.ProjectId }

// __createInstanceInput is used internally by genqlient
type __createInstanceInput struct {
	NetworkId string           `json:"networkId"`
	FlavorId  string           `json:"flavorId"`
	ImageId   string           `json:"imageId"`
	ProjectId string           `json:"projectId"`
	Name      string           `json:"name"`
	SshKeys   []string         `json:"sshKeys"`
	Zone      AvailabilityZone `json:"zone"`
	Managed   bool             `json:"managed"`
}

// GetNetworkId returns __createInstanceInput.NetworkId, and is useful for accessing the field via an interface.
func (v *__createInstanceInput) GetNetworkId() string { return v.NetworkId }

// GetFlavorId returns __createInstanceInput.FlavorId, and is useful for accessing the field via an interface.
func (v *__createInstanceInput) GetFlavorId() string { return v.FlavorId }

// GetImageId returns __createInstanceInput.ImageId, and is useful for accessing the field via an interface.
func (v *__createInstanceInput) GetImageId() string { return v.ImageId }

// GetProjectId returns __createInstanceInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__createInstanceInput) GetProjectId() string { return v.ProjectId }

// GetName returns __createInstanceInput.Name, and is useful for accessing the field via an interface.
func (v *__createInstanceInput) GetName() string { return v.Name }

// GetSshKeys returns __createInstanceInput.SshKeys, and is useful for accessing the field via an interface.
func (v *__createInstanceInput) GetSshKeys() []string { return v.SshKeys }

// GetZone returns __createInstanceInput.Zone, and is useful for accessing the field via an interface.
func (v *__createInstanceInput) GetZone() AvailabilityZone { return v.Zone }

// GetManaged returns __createInstanceInput.Managed, and is useful for accessing the field via an interface.
func (v *__createInstanceInput) GetManaged() bool { return v.Managed }

// __createKeyInput is used internally by genqlient
type __createKeyInput struct {
	Name        string `json:"name"`
	PublicKey   string `json:"publicKey"`
	ProjectId   string `json:"projectId,omitempty"`
	ProjectWide bool   `json:"projectWide"`
}

// GetName returns __createKeyInput.Name, and is useful for accessing the field via an interface.
func (v *__createKeyInput) GetName() string { return v.Name }

// GetPublicKey returns __createKeyInput.PublicKey, and is useful for accessing the field via an interface.
func (v *__createKeyInput) GetPublicKey() string { return v.PublicKey }

// GetProjectId returns __createKeyInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__createKeyInput) GetProjectId() string { return v.ProjectId }

// GetProjectWide returns __createKeyInput.ProjectWide, and is useful for accessing the field via an interface.
func (v *__createKeyInput) GetProjectWide() bool { return v.ProjectWide }

// __createNetworkInput is used internally by genqlient
type __createNetworkInput struct {
	Name             string           `json:"name"`
	AvailabilityZone AvailabilityZone `json:"availabilityZone"`
	ProjectId        string           `json:"projectId"`
	Subnets          []SubnetInput    `json:"subnets"`
}

// GetName returns __createNetworkInput.Name, and is useful for accessing the field via an interface.
func (v *__createNetworkInput) GetName() string { return v.Name }

// GetAvailabilityZone returns __createNetworkInput.AvailabilityZone, and is useful for accessing the field via an interface.
func (v *__createNetworkInput) GetAvailabilityZone() AvailabilityZone { return v.AvailabilityZone }

// GetProjectId returns __createNetworkInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__createNetworkInput) GetProjectId() string { return v.ProjectId }

// GetSubnets returns __createNetworkInput.Subnets, and is useful for accessing the field via an interface.
func (v *__createNetworkInput) GetSubnets() []SubnetInput { return v.Subnets }

// __deleteFloatingGroupByFloatingIpIdAndInstanceIdInput is used internally by genqlient
type __deleteFloatingGroupByFloatingIpIdAndInstanceIdInput struct {
	ProjectId    string `json:"projectId"`
	FloatingIPId string `json:"floatingIPId"`
	InstanceId   string `json:"instanceId"`
}

// GetProjectId returns __deleteFloatingGroupByFloatingIpIdAndInstanceIdInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__deleteFloatingGroupByFloatingIpIdAndInstanceIdInput) GetProjectId() string {
	return v.ProjectId
}

// GetFloatingIPId returns __deleteFloatingGroupByFloatingIpIdAndInstanceIdInput.FloatingIPId, and is useful for accessing the field via an interface.
func (v *__deleteFloatingGroupByFloatingIpIdAndInstanceIdInput) GetFloatingIPId() string {
	return v.FloatingIPId
}

// GetInstanceId returns __deleteFloatingGroupByFloatingIpIdAndInstanceIdInput.InstanceId, and is useful for accessing the field via an interface.
func (v *__deleteFloatingGroupByFloatingIpIdAndInstanceIdInput) GetInstanceId() string {
	return v.InstanceId
}

// __deleteFloatingIPInput is used internally by genqlient
type __deleteFloatingIPInput struct {
	Id        string `json:"id"`
	ProjectId string `json:"projectId"`
}

// GetId returns __deleteFloatingIPInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteFloatingIPInput) GetId() string { return v.Id }

// GetProjectId returns __deleteFloatingIPInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__deleteFloatingIPInput) GetProjectId() string { return v.ProjectId }

// __deleteInstanceInput is used internally by genqlient
type __deleteInstanceInput struct {
	Id        string `json:"id"`
	ProjectId string `json:"projectId"`
}

// GetId returns __deleteInstanceInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteInstanceInput) GetId() string { return v.Id }

// GetProjectId returns __deleteInstanceInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__deleteInstanceInput) GetProjectId() string { return v.ProjectId }

// __deleteKeyInput is used internally by genqlient
type __deleteKeyInput struct {
	Id        string `json:"id"`
	ProjectId string `json:"projectId,omitempty"`
}

// GetId returns __deleteKeyInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteKeyInput) GetId() string { return v.Id }

// GetProjectId returns __deleteKeyInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__deleteKeyInput) GetProjectId() string { return v.ProjectId }

// __deleteNetworkInput is used internally by genqlient
type __deleteNetworkInput struct {
	Id        string `json:"id"`
	ProjectId string `json:"projectId"`
}

// GetId returns __deleteNetworkInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteNetworkInput) GetId() string { return v.Id }

// GetProjectId returns __deleteNetworkInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__deleteNetworkInput) GetProjectId() string { return v.ProjectId }

// __getFlavorByNameInput is used internally by genqlient
type __getFlavorByNameInput struct {
	Name string `json:"name"`
}

// GetName returns __getFlavorByNameInput.Name, and is useful for accessing the field via an interface.
func (v *__getFlavorByNameInput) GetName() string { return v.Name }

// __getFloatingIPAttachmentInput is used internally by genqlient
type __getFloatingIPAttachmentInput struct {
	Id        string `json:"id"`
	ProjectId string `json:"projectId"`
}

// GetId returns __getFloatingIPAttachmentInput.Id, and is useful for accessing the field via an interface.
func (v *__getFloatingIPAttachmentInput) GetId() string { return v.Id }

// GetProjectId returns __getFloatingIPAttachmentInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__getFloatingIPAttachmentInput) GetProjectId() string { return v.ProjectId }

// __getFloatingIPInput is used internally by genqlient
type __getFloatingIPInput struct {
	Id        string `json:"id"`
	ProjectId string `json:"projectId"`
}

// GetId returns __getFloatingIPInput.Id, and is useful for accessing the field via an interface.
func (v *__getFloatingIPInput) GetId() string { return v.Id }

// GetProjectId returns __getFloatingIPInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__getFloatingIPInput) GetProjectId() string { return v.ProjectId }

// __getImageListInput is used internally by genqlient
type __getImageListInput struct {
	ProjectId string `json:"projectId"`
}

// GetProjectId returns __getImageListInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__getImageListInput) GetProjectId() string { return v.ProjectId }

// __getInstanceInput is used internally by genqlient
type __getInstanceInput struct {
	Id        string `json:"id"`
	ProjectId string `json:"projectId"`
}

// GetId returns __getInstanceInput.Id, and is useful for accessing the field via an interface.
func (v *__getInstanceInput) GetId() string { return v.Id }

// GetProjectId returns __getInstanceInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__getInstanceInput) GetProjectId() string { return v.ProjectId }

// __getKeyInput is used internally by genqlient
type __getKeyInput struct {
	Id          string `json:"id,omitempty"`
	Name        string `json:"name,omitempty"`
	ProjectId   string `json:"projectId,omitempty"`
	ProjectWide *bool  `json:"projectWide,omitempty"`
}

// GetId returns __getKeyInput.Id, and is useful for accessing the field via an interface.
func (v *__getKeyInput) GetId() string { return v.Id }

// GetName returns __getKeyInput.Name, and is useful for accessing the field via an interface.
func (v *__getKeyInput) GetName() string { return v.Name }

// GetProjectId returns __getKeyInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__getKeyInput) GetProjectId() string { return v.ProjectId }

// GetProjectWide returns __getKeyInput.ProjectWide, and is useful for accessing the field via an interface.
func (v *__getKeyInput) GetProjectWide() *bool { return v.ProjectWide }

// __getNetworkInput is used internally by genqlient
type __getNetworkInput struct {
	Id        string `json:"id"`
	ProjectId string `json:"projectId"`
}

// GetId returns __getNetworkInput.Id, and is useful for accessing the field via an interface.
func (v *__getNetworkInput) GetId() string { return v.Id }

// GetProjectId returns __getNetworkInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__getNetworkInput) GetProjectId() string { return v.ProjectId }

// __updateKeyInput is used internally by genqlient
type __updateKeyInput struct {
	Id        string `json:"id"`
	ProjectId string `json:"projectId,omitempty"`
	Name      string `json:"name"`
}

// GetId returns __updateKeyInput.Id, and is useful for accessing the field via an interface.
func (v *__updateKeyInput) GetId() string { return v.Id }

// GetProjectId returns __updateKeyInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__updateKeyInput) GetProjectId() string { return v.ProjectId }

// GetName returns __updateKeyInput.Name, and is useful for accessing the field via an interface.
func (v *__updateKeyInput) GetName() string { return v.Name }

// __updateNetworkInput is used internally by genqlient
type __updateNetworkInput struct {
	Id        string `json:"id"`
	ProjectId string `json:"projectId"`
	Name      string `json:"name"`
}

// GetId returns __updateNetworkInput.Id, and is useful for accessing the field via an interface.
func (v *__updateNetworkInput) GetId() string { return v.Id }

// GetProjectId returns __updateNetworkInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__updateNetworkInput) GetProjectId() string { return v.ProjectId }

// GetName returns __updateNetworkInput.Name, and is useful for accessing the field via an interface.
func (v *__updateNetworkInput) GetName() string { return v.Name }

// createFloatingGroupCreateFloatingGroupFloatingGroupResponse includes the requested fields of the GraphQL type FloatingGroupResponse.
// The GraphQL type's documentation follows.
//
// Floating Group Response
type createFloatingGroupCreateFloatingGroupFloatingGroupResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg []createFloatingGroupCreateFloatingGroupFloatingGroupResponseMsgFloatingGroupMember `json:"msg"`
}

// GetCode returns createFloatingGroupCreateFloatingGroupFloatingGroupResponse.Code, and is useful for accessing the field via an interface.
func (v *createFloatingGroupCreateFloatingGroupFloatingGroupResponse) GetCode() int { return v.Code }

// GetErr returns createFloatingGroupCreateFloatingGroupFloatingGroupResponse.Err, and is useful for accessing the field via an interface.
func (v *createFloatingGroupCreateFloatingGroupFloatingGroupResponse) GetErr() string { return v.Err }

// GetMsg returns createFloatingGroupCreateFloatingGroupFloatingGroupResponse.Msg, and is useful for accessing the field via an interface.
func (v *createFloatingGroupCreateFloatingGroupFloatingGroupResponse) GetMsg() []createFloatingGroupCreateFloatingGroupFloatingGroupResponseMsgFloatingGroupMember {
	return v.Msg
}

// createFloatingGroupCreateFloatingGroupFloatingGroupResponseMsgFloatingGroupMember includes the requested fields of the GraphQL type FloatingGroupMember.
// The GraphQL type's documentation follows.
//
// Floating Group
type createFloatingGroupCreateFloatingGroupFloatingGroupResponseMsgFloatingGroupMember struct {
	// ID
	Id string `json:"id"`
	// ID of vm
	VmId string `json:"vmId"`
}

// GetId returns createFloatingGroupCreateFloatingGroupFloatingGroupResponseMsgFloatingGroupMember.Id, and is useful for accessing the field via an interface.
func (v *createFloatingGroupCreateFloatingGroupFloatingGroupResponseMsgFloatingGroupMember) GetId() string {
	return v.Id
}

// GetVmId returns createFloatingGroupCreateFloatingGroupFloatingGroupResponseMsgFloatingGroupMember.VmId, and is useful for accessing the field via an interface.
func (v *createFloatingGroupCreateFloatingGroupFloatingGroupResponseMsgFloatingGroupMember) GetVmId() string {
	return v.VmId
}

// createFloatingGroupResponse is returned by createFloatingGroup on success.
type createFloatingGroupResponse struct {
	// Create Floating Group
	CreateFloatingGroup createFloatingGroupCreateFloatingGroupFloatingGroupResponse `json:"createFloatingGroup"`
}

// GetCreateFloatingGroup returns createFloatingGroupResponse.CreateFloatingGroup, and is useful for accessing the field via an interface.
func (v *createFloatingGroupResponse) GetCreateFloatingGroup() createFloatingGroupCreateFloatingGroupFloatingGroupResponse {
	return v.CreateFloatingGroup
}

// createFloatingIPCreateFloatingIPFloatingIPResponse includes the requested fields of the GraphQL type FloatingIPResponse.
// The GraphQL type's documentation follows.
//
// Floating IP Response
type createFloatingIPCreateFloatingIPFloatingIPResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg createFloatingIPCreateFloatingIPFloatingIPResponseMsgW1FloatingIP `json:"msg"`
}

// GetCode returns createFloatingIPCreateFloatingIPFloatingIPResponse.Code, and is useful for accessing the field via an interface.
func (v *createFloatingIPCreateFloatingIPFloatingIPResponse) GetCode() int { return v.Code }

// GetErr returns createFloatingIPCreateFloatingIPFloatingIPResponse.Err, and is useful for accessing the field via an interface.
func (v *createFloatingIPCreateFloatingIPFloatingIPResponse) GetErr() string { return v.Err }

// GetMsg returns createFloatingIPCreateFloatingIPFloatingIPResponse.Msg, and is useful for accessing the field via an interface.
func (v *createFloatingIPCreateFloatingIPFloatingIPResponse) GetMsg() createFloatingIPCreateFloatingIPFloatingIPResponseMsgW1FloatingIP {
	return v.Msg
}

// createFloatingIPCreateFloatingIPFloatingIPResponseMsgW1FloatingIP includes the requested fields of the GraphQL type W1FloatingIP.
// The GraphQL type's documentation follows.
//
// Floating IP
type createFloatingIPCreateFloatingIPFloatingIPResponseMsgW1FloatingIP struct {
	// ID
	Id string `json:"id"`
	// Public IP
	Ip string `json:"ip"`
}

// GetId returns createFloatingIPCreateFloatingIPFloatingIPResponseMsgW1FloatingIP.Id, and is useful for accessing the field via an interface.
func (v *createFloatingIPCreateFloatingIPFloatingIPResponseMsgW1FloatingIP) GetId() string {
	return v.Id
}

// GetIp returns createFloatingIPCreateFloatingIPFloatingIPResponseMsgW1FloatingIP.Ip, and is useful for accessing the field via an interface.
func (v *createFloatingIPCreateFloatingIPFloatingIPResponseMsgW1FloatingIP) GetIp() string {
	return v.Ip
}

// createFloatingIPResponse is returned by createFloatingIP on success.
type createFloatingIPResponse struct {
	// Create Floating IP
	CreateFloatingIP createFloatingIPCreateFloatingIPFloatingIPResponse `json:"createFloatingIP"`
}

// GetCreateFloatingIP returns createFloatingIPResponse.CreateFloatingIP, and is useful for accessing the field via an interface.
func (v *createFloatingIPResponse) GetCreateFloatingIP() createFloatingIPCreateFloatingIPFloatingIPResponse {
	return v.CreateFloatingIP
}

// createInstanceCreateInstanceW1InstanceResponse includes the requested fields of the GraphQL type W1InstanceResponse.
// The GraphQL type's documentation follows.
//
// Instance Response
type createInstanceCreateInstanceW1InstanceResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg createInstanceCreateInstanceW1InstanceResponseMsgW1Instance `json:"msg"`
}

// GetCode returns createInstanceCreateInstanceW1InstanceResponse.Code, and is useful for accessing the field via an interface.
func (v *createInstanceCreateInstanceW1InstanceResponse) GetCode() int { return v.Code }

// GetErr returns createInstanceCreateInstanceW1InstanceResponse.Err, and is useful for accessing the field via an interface.
func (v *createInstanceCreateInstanceW1InstanceResponse) GetErr() string { return v.Err }

// GetMsg returns createInstanceCreateInstanceW1InstanceResponse.Msg, and is useful for accessing the field via an interface.
func (v *createInstanceCreateInstanceW1InstanceResponse) GetMsg() createInstanceCreateInstanceW1InstanceResponseMsgW1Instance {
	return v.Msg
}

// createInstanceCreateInstanceW1InstanceResponseMsgW1Instance includes the requested fields of the GraphQL type W1Instance.
// The GraphQL type's documentation follows.
//
// Instance
type createInstanceCreateInstanceW1InstanceResponseMsgW1Instance struct {
	// ID
	Id string `json:"id"`
	// Status of Instance
	Status InstanceStatus `json:"status"`
}

// GetId returns createInstanceCreateInstanceW1InstanceResponseMsgW1Instance.Id, and is useful for accessing the field via an interface.
func (v *createInstanceCreateInstanceW1InstanceResponseMsgW1Instance) GetId() string { return v.Id }

// GetStatus returns createInstanceCreateInstanceW1InstanceResponseMsgW1Instance.Status, and is useful for accessing the field via an interface.
func (v *createInstanceCreateInstanceW1InstanceResponseMsgW1Instance) GetStatus() InstanceStatus {
	return v.Status
}

// createInstanceResponse is returned by createInstance on success.
type createInstanceResponse struct {
	// Create Instance
	CreateInstance createInstanceCreateInstanceW1InstanceResponse `json:"createInstance"`
}

// GetCreateInstance returns createInstanceResponse.CreateInstance, and is useful for accessing the field via an interface.
func (v *createInstanceResponse) GetCreateInstance() createInstanceCreateInstanceW1InstanceResponse {
	return v.CreateInstance
}

// createKeyCreateKeyW1KeyResponse includes the requested fields of the GraphQL type W1KeyResponse.
// The GraphQL type's documentation follows.
//
// Key Response
type createKeyCreateKeyW1KeyResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg createKeyCreateKeyW1KeyResponseMsgW1Key `json:"msg"`
}

// GetCode returns createKeyCreateKeyW1KeyResponse.Code, and is useful for accessing the field via an interface.
func (v *createKeyCreateKeyW1KeyResponse) GetCode() int { return v.Code }

// GetErr returns createKeyCreateKeyW1KeyResponse.Err, and is useful for accessing the field via an interface.
func (v *createKeyCreateKeyW1KeyResponse) GetErr() string { return v.Err }

// GetMsg returns createKeyCreateKeyW1KeyResponse.Msg, and is useful for accessing the field via an interface.
func (v *createKeyCreateKeyW1KeyResponse) GetMsg() createKeyCreateKeyW1KeyResponseMsgW1Key {
	return v.Msg
}

// createKeyCreateKeyW1KeyResponseMsgW1Key includes the requested fields of the GraphQL type W1Key.
// The GraphQL type's documentation follows.
//
// SSH Key
type createKeyCreateKeyW1KeyResponseMsgW1Key struct {
	// ID
	Id string `json:"id"`
}

// GetId returns createKeyCreateKeyW1KeyResponseMsgW1Key.Id, and is useful for accessing the field via an interface.
func (v *createKeyCreateKeyW1KeyResponseMsgW1Key) GetId() string { return v.Id }

// createKeyResponse is returned by createKey on success.
type createKeyResponse struct {
	// Create Key
	CreateKey createKeyCreateKeyW1KeyResponse `json:"createKey"`
}

// GetCreateKey returns createKeyResponse.CreateKey, and is useful for accessing the field via an interface.
func (v *createKeyResponse) GetCreateKey() createKeyCreateKeyW1KeyResponse { return v.CreateKey }

// createNetworkCreateNetworkW1NetworkResponse includes the requested fields of the GraphQL type W1NetworkResponse.
// The GraphQL type's documentation follows.
//
// Network Response
type createNetworkCreateNetworkW1NetworkResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg createNetworkCreateNetworkW1NetworkResponseMsgW1Network `json:"msg"`
}

// GetCode returns createNetworkCreateNetworkW1NetworkResponse.Code, and is useful for accessing the field via an interface.
func (v *createNetworkCreateNetworkW1NetworkResponse) GetCode() int { return v.Code }

// GetErr returns createNetworkCreateNetworkW1NetworkResponse.Err, and is useful for accessing the field via an interface.
func (v *createNetworkCreateNetworkW1NetworkResponse) GetErr() string { return v.Err }

// GetMsg returns createNetworkCreateNetworkW1NetworkResponse.Msg, and is useful for accessing the field via an interface.
func (v *createNetworkCreateNetworkW1NetworkResponse) GetMsg() createNetworkCreateNetworkW1NetworkResponseMsgW1Network {
	return v.Msg
}

// createNetworkCreateNetworkW1NetworkResponseMsgW1Network includes the requested fields of the GraphQL type W1Network.
// The GraphQL type's documentation follows.
//
// Network
type createNetworkCreateNetworkW1NetworkResponseMsgW1Network struct {
	// ID
	Id string `json:"id"`
	// Name
	Name string `json:"name"`
	// Subnets
	Subnets []createNetworkCreateNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet `json:"subnets"`
}

// GetId returns createNetworkCreateNetworkW1NetworkResponseMsgW1Network.Id, and is useful for accessing the field via an interface.
func (v *createNetworkCreateNetworkW1NetworkResponseMsgW1Network) GetId() string { return v.Id }

// GetName returns createNetworkCreateNetworkW1NetworkResponseMsgW1Network.Name, and is useful for accessing the field via an interface.
func (v *createNetworkCreateNetworkW1NetworkResponseMsgW1Network) GetName() string { return v.Name }

// GetSubnets returns createNetworkCreateNetworkW1NetworkResponseMsgW1Network.Subnets, and is useful for accessing the field via an interface.
func (v *createNetworkCreateNetworkW1NetworkResponseMsgW1Network) GetSubnets() []createNetworkCreateNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet {
	return v.Subnets
}

// createNetworkCreateNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet includes the requested fields of the GraphQL type Subnet.
// The GraphQL type's documentation follows.
//
// Subnet
type createNetworkCreateNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet struct {
	// CIDR
	Cidr string `json:"cidr"`
	// ID
	Id string `json:"id"`
	// Name
	Name string `json:"name"`
}

// GetCidr returns createNetworkCreateNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet.Cidr, and is useful for accessing the field via an interface.
func (v *createNetworkCreateNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet) GetCidr() string {
	return v.Cidr
}

// GetId returns createNetworkCreateNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet.Id, and is useful for accessing the field via an interface.
func (v *createNetworkCreateNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet) GetId() string {
	return v.Id
}

// GetName returns createNetworkCreateNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet.Name, and is useful for accessing the field via an interface.
func (v *createNetworkCreateNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet) GetName() string {
	return v.Name
}

// createNetworkResponse is returned by createNetwork on success.
type createNetworkResponse struct {
	// Create Network
	CreateNetwork createNetworkCreateNetworkW1NetworkResponse `json:"createNetwork"`
}

// GetCreateNetwork returns createNetworkResponse.CreateNetwork, and is useful for accessing the field via an interface.
func (v *createNetworkResponse) GetCreateNetwork() createNetworkCreateNetworkW1NetworkResponse {
	return v.CreateNetwork
}

// deleteFloatingGroupByFloatingIpIdAndInstanceIdDeleteFloatingGroupByFloatingIpIdAndInstanceIdResponse includes the requested fields of the GraphQL type Response.
// The GraphQL type's documentation follows.
//
// Response
type deleteFloatingGroupByFloatingIpIdAndInstanceIdDeleteFloatingGroupByFloatingIpIdAndInstanceIdResponse struct {
	// Error Message
	Err string `json:"err"`
	// Return Code
	Code int `json:"code"`
	// Success Message
	Msg string `json:"msg"`
}

// GetErr returns deleteFloatingGroupByFloatingIpIdAndInstanceIdDeleteFloatingGroupByFloatingIpIdAndInstanceIdResponse.Err, and is useful for accessing the field via an interface.
func (v *deleteFloatingGroupByFloatingIpIdAndInstanceIdDeleteFloatingGroupByFloatingIpIdAndInstanceIdResponse) GetErr() string {
	return v.Err
}

// GetCode returns deleteFloatingGroupByFloatingIpIdAndInstanceIdDeleteFloatingGroupByFloatingIpIdAndInstanceIdResponse.Code, and is useful for accessing the field via an interface.
func (v *deleteFloatingGroupByFloatingIpIdAndInstanceIdDeleteFloatingGroupByFloatingIpIdAndInstanceIdResponse) GetCode() int {
	return v.Code
}

// GetMsg returns deleteFloatingGroupByFloatingIpIdAndInstanceIdDeleteFloatingGroupByFloatingIpIdAndInstanceIdResponse.Msg, and is useful for accessing the field via an interface.
func (v *deleteFloatingGroupByFloatingIpIdAndInstanceIdDeleteFloatingGroupByFloatingIpIdAndInstanceIdResponse) GetMsg() string {
	return v.Msg
}

// deleteFloatingGroupByFloatingIpIdAndInstanceIdResponse is returned by deleteFloatingGroupByFloatingIpIdAndInstanceId on success.
type deleteFloatingGroupByFloatingIpIdAndInstanceIdResponse struct {
	// Delete Floating Group by Ip and Instance ID
	DeleteFloatingGroupByFloatingIpIdAndInstanceId deleteFloatingGroupByFloatingIpIdAndInstanceIdDeleteFloatingGroupByFloatingIpIdAndInstanceIdResponse `json:"deleteFloatingGroupByFloatingIpIdAndInstanceId"`
}

// GetDeleteFloatingGroupByFloatingIpIdAndInstanceId returns deleteFloatingGroupByFloatingIpIdAndInstanceIdResponse.DeleteFloatingGroupByFloatingIpIdAndInstanceId, and is useful for accessing the field via an interface.
func (v *deleteFloatingGroupByFloatingIpIdAndInstanceIdResponse) GetDeleteFloatingGroupByFloatingIpIdAndInstanceId() deleteFloatingGroupByFloatingIpIdAndInstanceIdDeleteFloatingGroupByFloatingIpIdAndInstanceIdResponse {
	return v.DeleteFloatingGroupByFloatingIpIdAndInstanceId
}

// deleteFloatingIPDeleteFloatingIPResponse includes the requested fields of the GraphQL type Response.
// The GraphQL type's documentation follows.
//
// Response
type deleteFloatingIPDeleteFloatingIPResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg string `json:"msg"`
}

// GetCode returns deleteFloatingIPDeleteFloatingIPResponse.Code, and is useful for accessing the field via an interface.
func (v *deleteFloatingIPDeleteFloatingIPResponse) GetCode() int { return v.Code }

// GetErr returns deleteFloatingIPDeleteFloatingIPResponse.Err, and is useful for accessing the field via an interface.
func (v *deleteFloatingIPDeleteFloatingIPResponse) GetErr() string { return v.Err }

// GetMsg returns deleteFloatingIPDeleteFloatingIPResponse.Msg, and is useful for accessing the field via an interface.
func (v *deleteFloatingIPDeleteFloatingIPResponse) GetMsg() string { return v.Msg }

// deleteFloatingIPResponse is returned by deleteFloatingIP on success.
type deleteFloatingIPResponse struct {
	// Delete Floating IP
	DeleteFloatingIP deleteFloatingIPDeleteFloatingIPResponse `json:"deleteFloatingIP"`
}

// GetDeleteFloatingIP returns deleteFloatingIPResponse.DeleteFloatingIP, and is useful for accessing the field via an interface.
func (v *deleteFloatingIPResponse) GetDeleteFloatingIP() deleteFloatingIPDeleteFloatingIPResponse {
	return v.DeleteFloatingIP
}

// deleteInstanceDeleteInstanceW1InstanceResponse includes the requested fields of the GraphQL type W1InstanceResponse.
// The GraphQL type's documentation follows.
//
// Instance Response
type deleteInstanceDeleteInstanceW1InstanceResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg deleteInstanceDeleteInstanceW1InstanceResponseMsgW1Instance `json:"msg"`
}

// GetCode returns deleteInstanceDeleteInstanceW1InstanceResponse.Code, and is useful for accessing the field via an interface.
func (v *deleteInstanceDeleteInstanceW1InstanceResponse) GetCode() int { return v.Code }

// GetErr returns deleteInstanceDeleteInstanceW1InstanceResponse.Err, and is useful for accessing the field via an interface.
func (v *deleteInstanceDeleteInstanceW1InstanceResponse) GetErr() string { return v.Err }

// GetMsg returns deleteInstanceDeleteInstanceW1InstanceResponse.Msg, and is useful for accessing the field via an interface.
func (v *deleteInstanceDeleteInstanceW1InstanceResponse) GetMsg() deleteInstanceDeleteInstanceW1InstanceResponseMsgW1Instance {
	return v.Msg
}

// deleteInstanceDeleteInstanceW1InstanceResponseMsgW1Instance includes the requested fields of the GraphQL type W1Instance.
// The GraphQL type's documentation follows.
//
// Instance
type deleteInstanceDeleteInstanceW1InstanceResponseMsgW1Instance struct {
	// Status of Instance
	Status InstanceStatus `json:"status"`
}

// GetStatus returns deleteInstanceDeleteInstanceW1InstanceResponseMsgW1Instance.Status, and is useful for accessing the field via an interface.
func (v *deleteInstanceDeleteInstanceW1InstanceResponseMsgW1Instance) GetStatus() InstanceStatus {
	return v.Status
}

// deleteInstanceResponse is returned by deleteInstance on success.
type deleteInstanceResponse struct {
	// Delete Instance
	DeleteInstance deleteInstanceDeleteInstanceW1InstanceResponse `json:"deleteInstance"`
}

// GetDeleteInstance returns deleteInstanceResponse.DeleteInstance, and is useful for accessing the field via an interface.
func (v *deleteInstanceResponse) GetDeleteInstance() deleteInstanceDeleteInstanceW1InstanceResponse {
	return v.DeleteInstance
}

// deleteKeyDeleteKeyResponse includes the requested fields of the GraphQL type Response.
// The GraphQL type's documentation follows.
//
// Response
type deleteKeyDeleteKeyResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg string `json:"msg"`
}

// GetCode returns deleteKeyDeleteKeyResponse.Code, and is useful for accessing the field via an interface.
func (v *deleteKeyDeleteKeyResponse) GetCode() int { return v.Code }

// GetErr returns deleteKeyDeleteKeyResponse.Err, and is useful for accessing the field via an interface.
func (v *deleteKeyDeleteKeyResponse) GetErr() string { return v.Err }

// GetMsg returns deleteKeyDeleteKeyResponse.Msg, and is useful for accessing the field via an interface.
func (v *deleteKeyDeleteKeyResponse) GetMsg() string { return v.Msg }

// deleteKeyResponse is returned by deleteKey on success.
type deleteKeyResponse struct {
	// Delete Key
	DeleteKey deleteKeyDeleteKeyResponse `json:"deleteKey"`
}

// GetDeleteKey returns deleteKeyResponse.DeleteKey, and is useful for accessing the field via an interface.
func (v *deleteKeyResponse) GetDeleteKey() deleteKeyDeleteKeyResponse { return v.DeleteKey }

// deleteNetworkDeleteNetworkResponse includes the requested fields of the GraphQL type Response.
// The GraphQL type's documentation follows.
//
// Response
type deleteNetworkDeleteNetworkResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg string `json:"msg"`
}

// GetCode returns deleteNetworkDeleteNetworkResponse.Code, and is useful for accessing the field via an interface.
func (v *deleteNetworkDeleteNetworkResponse) GetCode() int { return v.Code }

// GetErr returns deleteNetworkDeleteNetworkResponse.Err, and is useful for accessing the field via an interface.
func (v *deleteNetworkDeleteNetworkResponse) GetErr() string { return v.Err }

// GetMsg returns deleteNetworkDeleteNetworkResponse.Msg, and is useful for accessing the field via an interface.
func (v *deleteNetworkDeleteNetworkResponse) GetMsg() string { return v.Msg }

// deleteNetworkResponse is returned by deleteNetwork on success.
type deleteNetworkResponse struct {
	// Delete Network
	DeleteNetwork deleteNetworkDeleteNetworkResponse `json:"deleteNetwork"`
}

// GetDeleteNetwork returns deleteNetworkResponse.DeleteNetwork, and is useful for accessing the field via an interface.
func (v *deleteNetworkResponse) GetDeleteNetwork() deleteNetworkDeleteNetworkResponse {
	return v.DeleteNetwork
}

// getDefaultProjectGetDefaultProjectProjectResponse includes the requested fields of the GraphQL type ProjectResponse.
// The GraphQL type's documentation follows.
//
// ProjectResponse
type getDefaultProjectGetDefaultProjectProjectResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg getDefaultProjectGetDefaultProjectProjectResponseMsgProject `json:"msg"`
}

// GetCode returns getDefaultProjectGetDefaultProjectProjectResponse.Code, and is useful for accessing the field via an interface.
func (v *getDefaultProjectGetDefaultProjectProjectResponse) GetCode() int { return v.Code }

// GetErr returns getDefaultProjectGetDefaultProjectProjectResponse.Err, and is useful for accessing the field via an interface.
func (v *getDefaultProjectGetDefaultProjectProjectResponse) GetErr() string { return v.Err }

// GetMsg returns getDefaultProjectGetDefaultProjectProjectResponse.Msg, and is useful for accessing the field via an interface.
func (v *getDefaultProjectGetDefaultProjectProjectResponse) GetMsg() getDefaultProjectGetDefaultProjectProjectResponseMsgProject {
	return v.Msg
}

// getDefaultProjectGetDefaultProjectProjectResponseMsgProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// Project
type getDefaultProjectGetDefaultProjectProjectResponseMsgProject struct {
	// ID
	Id string `json:"id"`
	// Name
	Name string `json:"name"`
}

// GetId returns getDefaultProjectGetDefaultProjectProjectResponseMsgProject.Id, and is useful for accessing the field via an interface.
func (v *getDefaultProjectGetDefaultProjectProjectResponseMsgProject) GetId() string { return v.Id }

// GetName returns getDefaultProjectGetDefaultProjectProjectResponseMsgProject.Name, and is useful for accessing the field via an interface.
func (v *getDefaultProjectGetDefaultProjectProjectResponseMsgProject) GetName() string { return v.Name }

// getDefaultProjectResponse is returned by getDefaultProject on success.
type getDefaultProjectResponse struct {
	// Get Default Project
	GetDefaultProject getDefaultProjectGetDefaultProjectProjectResponse `json:"getDefaultProject"`
}

// GetGetDefaultProject returns getDefaultProjectResponse.GetDefaultProject, and is useful for accessing the field via an interface.
func (v *getDefaultProjectResponse) GetGetDefaultProject() getDefaultProjectGetDefaultProjectProjectResponse {
	return v.GetDefaultProject
}

// getFlavorByNameGetFlavorByNameFlavorResponse includes the requested fields of the GraphQL type FlavorResponse.
// The GraphQL type's documentation follows.
//
// Flavor Response
type getFlavorByNameGetFlavorByNameFlavorResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg getFlavorByNameGetFlavorByNameFlavorResponseMsgFlavor `json:"msg"`
}

// GetCode returns getFlavorByNameGetFlavorByNameFlavorResponse.Code, and is useful for accessing the field via an interface.
func (v *getFlavorByNameGetFlavorByNameFlavorResponse) GetCode() int { return v.Code }

// GetErr returns getFlavorByNameGetFlavorByNameFlavorResponse.Err, and is useful for accessing the field via an interface.
func (v *getFlavorByNameGetFlavorByNameFlavorResponse) GetErr() string { return v.Err }

// GetMsg returns getFlavorByNameGetFlavorByNameFlavorResponse.Msg, and is useful for accessing the field via an interface.
func (v *getFlavorByNameGetFlavorByNameFlavorResponse) GetMsg() getFlavorByNameGetFlavorByNameFlavorResponseMsgFlavor {
	return v.Msg
}

// getFlavorByNameGetFlavorByNameFlavorResponseMsgFlavor includes the requested fields of the GraphQL type Flavor.
// The GraphQL type's documentation follows.
//
// Flavor
type getFlavorByNameGetFlavorByNameFlavorResponseMsgFlavor struct {
	// ID
	Id string `json:"id"`
}

// GetId returns getFlavorByNameGetFlavorByNameFlavorResponseMsgFlavor.Id, and is useful for accessing the field via an interface.
func (v *getFlavorByNameGetFlavorByNameFlavorResponseMsgFlavor) GetId() string { return v.Id }

// getFlavorByNameResponse is returned by getFlavorByName on success.
type getFlavorByNameResponse struct {
	// Get Flavor By Name
	GetFlavorByName getFlavorByNameGetFlavorByNameFlavorResponse `json:"getFlavorByName"`
}

// GetGetFlavorByName returns getFlavorByNameResponse.GetFlavorByName, and is useful for accessing the field via an interface.
func (v *getFlavorByNameResponse) GetGetFlavorByName() getFlavorByNameGetFlavorByNameFlavorResponse {
	return v.GetFlavorByName
}

// getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse includes the requested fields of the GraphQL type FloatingIPAttachmentResponse.
// The GraphQL type's documentation follows.
//
// Floating IP Attachment Response
type getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPAttachment `json:"-"`
}

// GetCode returns getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse.Code, and is useful for accessing the field via an interface.
func (v *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse) GetCode() int {
	return v.Code
}

// GetErr returns getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse.Err, and is useful for accessing the field via an interface.
func (v *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse) GetErr() string {
	return v.Err
}

// GetMsg returns getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse.Msg, and is useful for accessing the field via an interface.
func (v *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse) GetMsg() getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPAttachment {
	return v.Msg
}

func (v *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse
		Msg json.RawMessage `json:"msg"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Msg
		src := firstPass.Msg
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalgetFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPAttachment(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse.Msg: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse struct {
	Code int `json:"code"`

	Err string `json:"err"`

	Msg json.RawMessage `json:"msg"`
}

func (v *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse) __premarshalJSON() (*__premarshalgetFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse, error) {
	var retval __premarshalgetFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse

	retval.Code = v.Code
	retval.Err = v.Err
	{

		dst := &retval.Msg
		src := v.Msg
		var err error
		*dst, err = __marshalgetFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPAttachment(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse.Msg: %w", err)
		}
	}
	return &retval, nil
}

// getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPAttachment includes the requested fields of the GraphQL interface FloatingIPAttachment.
//
// getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPAttachment is implemented by the following types:
// getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachment
// getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgLoadBalancerFrontendIP
// The GraphQL type's documentation follows.
//
// Floating IP Attachment can be either an vm or loadbalancer frontend ip
type getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPAttachment interface {
	implementsGraphQLInterfacegetFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPAttachment()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachment) implementsGraphQLInterfacegetFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPAttachment() {
}
func (v *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgLoadBalancerFrontendIP) implementsGraphQLInterfacegetFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPAttachment() {
}

func __unmarshalgetFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPAttachment(b []byte, v *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPAttachment) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "FloatingIPInstanceAttachment":
		*v = new(getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachment)
		return json.Unmarshal(b, *v)
	case "LoadBalancerFrontendIP":
		*v = new(getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgLoadBalancerFrontendIP)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing FloatingIPAttachment.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPAttachment: "%v"`, tn.TypeName)
	}
}

func __marshalgetFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPAttachment(v *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPAttachment) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachment:
		typename = "FloatingIPInstanceAttachment"

		result := struct {
			TypeName string `json:"__typename"`
			*getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachment
		}{typename, v}
		return json.Marshal(result)
	case *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgLoadBalancerFrontendIP:
		typename = "LoadBalancerFrontendIP"

		result := struct {
			TypeName string `json:"__typename"`
			*getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgLoadBalancerFrontendIP
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPAttachment: "%T"`, v)
	}
}

// getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachment includes the requested fields of the GraphQL type FloatingIPInstanceAttachment.
// The GraphQL type's documentation follows.
//
// Floating IP Instance Attachment
type getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachment struct {
	Typename string `json:"__typename"`
	// Nat to VMs private IP
	NatToVmsPrivateIp bool                                                                                                                             `json:"natToVmsPrivateIp"`
	Vms               []getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachmentVmsFloatingIPInstance `json:"vms"`
}

// GetTypename returns getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachment.Typename, and is useful for accessing the field via an interface.
func (v *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachment) GetTypename() string {
	return v.Typename
}

// GetNatToVmsPrivateIp returns getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachment.NatToVmsPrivateIp, and is useful for accessing the field via an interface.
func (v *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachment) GetNatToVmsPrivateIp() bool {
	return v.NatToVmsPrivateIp
}

// GetVms returns getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachment.Vms, and is useful for accessing the field via an interface.
func (v *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachment) GetVms() []getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachmentVmsFloatingIPInstance {
	return v.Vms
}

// getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachmentVmsFloatingIPInstance includes the requested fields of the GraphQL type FloatingIPInstance.
type getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachmentVmsFloatingIPInstance struct {
	// ID
	Id string `json:"id"`
	// Priority of vm (will be relevant later)
	Priority int    `json:"priority"`
	VmId     string `json:"vmId"`
}

// GetId returns getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachmentVmsFloatingIPInstance.Id, and is useful for accessing the field via an interface.
func (v *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachmentVmsFloatingIPInstance) GetId() string {
	return v.Id
}

// GetPriority returns getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachmentVmsFloatingIPInstance.Priority, and is useful for accessing the field via an interface.
func (v *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachmentVmsFloatingIPInstance) GetPriority() int {
	return v.Priority
}

// GetVmId returns getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachmentVmsFloatingIPInstance.VmId, and is useful for accessing the field via an interface.
func (v *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgFloatingIPInstanceAttachmentVmsFloatingIPInstance) GetVmId() string {
	return v.VmId
}

// getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgLoadBalancerFrontendIP includes the requested fields of the GraphQL type LoadBalancerFrontendIP.
// The GraphQL type's documentation follows.
//
// Loadbalancer Frontend IP
type getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgLoadBalancerFrontendIP struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgLoadBalancerFrontendIP.Typename, and is useful for accessing the field via an interface.
func (v *getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponseMsgLoadBalancerFrontendIP) GetTypename() string {
	return v.Typename
}

// getFloatingIPAttachmentResponse is returned by getFloatingIPAttachment on success.
type getFloatingIPAttachmentResponse struct {
	// Get Floating IP Attachment
	GetFloatingIPAttachment getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse `json:"getFloatingIPAttachment"`
}

// GetGetFloatingIPAttachment returns getFloatingIPAttachmentResponse.GetFloatingIPAttachment, and is useful for accessing the field via an interface.
func (v *getFloatingIPAttachmentResponse) GetGetFloatingIPAttachment() getFloatingIPAttachmentGetFloatingIPAttachmentFloatingIPAttachmentResponse {
	return v.GetFloatingIPAttachment
}

// getFloatingIPGetFloatingIPFloatingIPResponse includes the requested fields of the GraphQL type FloatingIPResponse.
// The GraphQL type's documentation follows.
//
// Floating IP Response
type getFloatingIPGetFloatingIPFloatingIPResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg getFloatingIPGetFloatingIPFloatingIPResponseMsgW1FloatingIP `json:"msg"`
}

// GetCode returns getFloatingIPGetFloatingIPFloatingIPResponse.Code, and is useful for accessing the field via an interface.
func (v *getFloatingIPGetFloatingIPFloatingIPResponse) GetCode() int { return v.Code }

// GetErr returns getFloatingIPGetFloatingIPFloatingIPResponse.Err, and is useful for accessing the field via an interface.
func (v *getFloatingIPGetFloatingIPFloatingIPResponse) GetErr() string { return v.Err }

// GetMsg returns getFloatingIPGetFloatingIPFloatingIPResponse.Msg, and is useful for accessing the field via an interface.
func (v *getFloatingIPGetFloatingIPFloatingIPResponse) GetMsg() getFloatingIPGetFloatingIPFloatingIPResponseMsgW1FloatingIP {
	return v.Msg
}

// getFloatingIPGetFloatingIPFloatingIPResponseMsgW1FloatingIP includes the requested fields of the GraphQL type W1FloatingIP.
// The GraphQL type's documentation follows.
//
// Floating IP
type getFloatingIPGetFloatingIPFloatingIPResponseMsgW1FloatingIP struct {
	// Public IP
	Ip string `json:"ip"`
}

// GetIp returns getFloatingIPGetFloatingIPFloatingIPResponseMsgW1FloatingIP.Ip, and is useful for accessing the field via an interface.
func (v *getFloatingIPGetFloatingIPFloatingIPResponseMsgW1FloatingIP) GetIp() string { return v.Ip }

// getFloatingIPResponse is returned by getFloatingIP on success.
type getFloatingIPResponse struct {
	GetFloatingIP getFloatingIPGetFloatingIPFloatingIPResponse `json:"getFloatingIP"`
}

// GetGetFloatingIP returns getFloatingIPResponse.GetFloatingIP, and is useful for accessing the field via an interface.
func (v *getFloatingIPResponse) GetGetFloatingIP() getFloatingIPGetFloatingIPFloatingIPResponse {
	return v.GetFloatingIP
}

// getImageListGetImageListW1ImageListResponse includes the requested fields of the GraphQL type W1ImageListResponse.
// The GraphQL type's documentation follows.
//
// Image List Response
type getImageListGetImageListW1ImageListResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg []getImageListGetImageListW1ImageListResponseMsgW1Image `json:"msg"`
}

// GetCode returns getImageListGetImageListW1ImageListResponse.Code, and is useful for accessing the field via an interface.
func (v *getImageListGetImageListW1ImageListResponse) GetCode() int { return v.Code }

// GetErr returns getImageListGetImageListW1ImageListResponse.Err, and is useful for accessing the field via an interface.
func (v *getImageListGetImageListW1ImageListResponse) GetErr() string { return v.Err }

// GetMsg returns getImageListGetImageListW1ImageListResponse.Msg, and is useful for accessing the field via an interface.
func (v *getImageListGetImageListW1ImageListResponse) GetMsg() []getImageListGetImageListW1ImageListResponseMsgW1Image {
	return v.Msg
}

// getImageListGetImageListW1ImageListResponseMsgW1Image includes the requested fields of the GraphQL type W1Image.
// The GraphQL type's documentation follows.
//
// Image
type getImageListGetImageListW1ImageListResponseMsgW1Image struct {
	// ID
	Id string `json:"id"`
	// Name
	Name string `json:"name"`
}

// GetId returns getImageListGetImageListW1ImageListResponseMsgW1Image.Id, and is useful for accessing the field via an interface.
func (v *getImageListGetImageListW1ImageListResponseMsgW1Image) GetId() string { return v.Id }

// GetName returns getImageListGetImageListW1ImageListResponseMsgW1Image.Name, and is useful for accessing the field via an interface.
func (v *getImageListGetImageListW1ImageListResponseMsgW1Image) GetName() string { return v.Name }

// getImageListResponse is returned by getImageList on success.
type getImageListResponse struct {
	// Get Image List
	GetImageList getImageListGetImageListW1ImageListResponse `json:"getImageList"`
}

// GetGetImageList returns getImageListResponse.GetImageList, and is useful for accessing the field via an interface.
func (v *getImageListResponse) GetGetImageList() getImageListGetImageListW1ImageListResponse {
	return v.GetImageList
}

// getInstanceGetInstanceW1InstanceResponse includes the requested fields of the GraphQL type W1InstanceResponse.
// The GraphQL type's documentation follows.
//
// Instance Response
type getInstanceGetInstanceW1InstanceResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg getInstanceGetInstanceW1InstanceResponseMsgW1Instance `json:"msg"`
}

// GetCode returns getInstanceGetInstanceW1InstanceResponse.Code, and is useful for accessing the field via an interface.
func (v *getInstanceGetInstanceW1InstanceResponse) GetCode() int { return v.Code }

// GetErr returns getInstanceGetInstanceW1InstanceResponse.Err, and is useful for accessing the field via an interface.
func (v *getInstanceGetInstanceW1InstanceResponse) GetErr() string { return v.Err }

// GetMsg returns getInstanceGetInstanceW1InstanceResponse.Msg, and is useful for accessing the field via an interface.
func (v *getInstanceGetInstanceW1InstanceResponse) GetMsg() getInstanceGetInstanceW1InstanceResponseMsgW1Instance {
	return v.Msg
}

// getInstanceGetInstanceW1InstanceResponseMsgW1Instance includes the requested fields of the GraphQL type W1Instance.
// The GraphQL type's documentation follows.
//
// Instance
type getInstanceGetInstanceW1InstanceResponseMsgW1Instance struct {
	// ID
	Id string `json:"id"`
	// Name
	Name string `json:"name"`
	// Status of Instance
	Status InstanceStatus `json:"status"`
	// Availability Zone
	AvailabilityZone AvailabilityZone `json:"availabilityZone"`
	// ID of flavor
	FlavorId string `json:"flavorId"`
}

// GetId returns getInstanceGetInstanceW1InstanceResponseMsgW1Instance.Id, and is useful for accessing the field via an interface.
func (v *getInstanceGetInstanceW1InstanceResponseMsgW1Instance) GetId() string { return v.Id }

// GetName returns getInstanceGetInstanceW1InstanceResponseMsgW1Instance.Name, and is useful for accessing the field via an interface.
func (v *getInstanceGetInstanceW1InstanceResponseMsgW1Instance) GetName() string { return v.Name }

// GetStatus returns getInstanceGetInstanceW1InstanceResponseMsgW1Instance.Status, and is useful for accessing the field via an interface.
func (v *getInstanceGetInstanceW1InstanceResponseMsgW1Instance) GetStatus() InstanceStatus {
	return v.Status
}

// GetAvailabilityZone returns getInstanceGetInstanceW1InstanceResponseMsgW1Instance.AvailabilityZone, and is useful for accessing the field via an interface.
func (v *getInstanceGetInstanceW1InstanceResponseMsgW1Instance) GetAvailabilityZone() AvailabilityZone {
	return v.AvailabilityZone
}

// GetFlavorId returns getInstanceGetInstanceW1InstanceResponseMsgW1Instance.FlavorId, and is useful for accessing the field via an interface.
func (v *getInstanceGetInstanceW1InstanceResponseMsgW1Instance) GetFlavorId() string {
	return v.FlavorId
}

// getInstanceResponse is returned by getInstance on success.
type getInstanceResponse struct {
	// Get Instance
	GetInstance getInstanceGetInstanceW1InstanceResponse `json:"getInstance"`
}

// GetGetInstance returns getInstanceResponse.GetInstance, and is useful for accessing the field via an interface.
func (v *getInstanceResponse) GetGetInstance() getInstanceGetInstanceW1InstanceResponse {
	return v.GetInstance
}

// getKeyGetKeyW1KeyResponse includes the requested fields of the GraphQL type W1KeyResponse.
// The GraphQL type's documentation follows.
//
// Key Response
type getKeyGetKeyW1KeyResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg getKeyGetKeyW1KeyResponseMsgW1Key `json:"msg"`
}

// GetCode returns getKeyGetKeyW1KeyResponse.Code, and is useful for accessing the field via an interface.
func (v *getKeyGetKeyW1KeyResponse) GetCode() int { return v.Code }

// GetErr returns getKeyGetKeyW1KeyResponse.Err, and is useful for accessing the field via an interface.
func (v *getKeyGetKeyW1KeyResponse) GetErr() string { return v.Err }

// GetMsg returns getKeyGetKeyW1KeyResponse.Msg, and is useful for accessing the field via an interface.
func (v *getKeyGetKeyW1KeyResponse) GetMsg() getKeyGetKeyW1KeyResponseMsgW1Key { return v.Msg }

// getKeyGetKeyW1KeyResponseMsgW1Key includes the requested fields of the GraphQL type W1Key.
// The GraphQL type's documentation follows.
//
// SSH Key
type getKeyGetKeyW1KeyResponseMsgW1Key struct {
	// ID
	Id string `json:"id"`
	// Name
	Name string `json:"name"`
	// Public Key
	PublicKey string `json:"publicKey"`
	// Can this key be used for the complete project or only the user
	ProjectWide bool `json:"projectWide"`
}

// GetId returns getKeyGetKeyW1KeyResponseMsgW1Key.Id, and is useful for accessing the field via an interface.
func (v *getKeyGetKeyW1KeyResponseMsgW1Key) GetId() string { return v.Id }

// GetName returns getKeyGetKeyW1KeyResponseMsgW1Key.Name, and is useful for accessing the field via an interface.
func (v *getKeyGetKeyW1KeyResponseMsgW1Key) GetName() string { return v.Name }

// GetPublicKey returns getKeyGetKeyW1KeyResponseMsgW1Key.PublicKey, and is useful for accessing the field via an interface.
func (v *getKeyGetKeyW1KeyResponseMsgW1Key) GetPublicKey() string { return v.PublicKey }

// GetProjectWide returns getKeyGetKeyW1KeyResponseMsgW1Key.ProjectWide, and is useful for accessing the field via an interface.
func (v *getKeyGetKeyW1KeyResponseMsgW1Key) GetProjectWide() bool { return v.ProjectWide }

// getKeyResponse is returned by getKey on success.
type getKeyResponse struct {
	// Get Key
	GetKey getKeyGetKeyW1KeyResponse `json:"getKey"`
}

// GetGetKey returns getKeyResponse.GetKey, and is useful for accessing the field via an interface.
func (v *getKeyResponse) GetGetKey() getKeyGetKeyW1KeyResponse { return v.GetKey }

// getNetworkGetNetworkW1NetworkResponse includes the requested fields of the GraphQL type W1NetworkResponse.
// The GraphQL type's documentation follows.
//
// Network Response
type getNetworkGetNetworkW1NetworkResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg getNetworkGetNetworkW1NetworkResponseMsgW1Network `json:"msg"`
}

// GetCode returns getNetworkGetNetworkW1NetworkResponse.Code, and is useful for accessing the field via an interface.
func (v *getNetworkGetNetworkW1NetworkResponse) GetCode() int { return v.Code }

// GetErr returns getNetworkGetNetworkW1NetworkResponse.Err, and is useful for accessing the field via an interface.
func (v *getNetworkGetNetworkW1NetworkResponse) GetErr() string { return v.Err }

// GetMsg returns getNetworkGetNetworkW1NetworkResponse.Msg, and is useful for accessing the field via an interface.
func (v *getNetworkGetNetworkW1NetworkResponse) GetMsg() getNetworkGetNetworkW1NetworkResponseMsgW1Network {
	return v.Msg
}

// getNetworkGetNetworkW1NetworkResponseMsgW1Network includes the requested fields of the GraphQL type W1Network.
// The GraphQL type's documentation follows.
//
// Network
type getNetworkGetNetworkW1NetworkResponseMsgW1Network struct {
	// ID
	Id string `json:"id"`
	// Name
	Name string `json:"name"`
	// Availability Zone
	AvailabilityZone AvailabilityZone `json:"availabilityZone"`
	// Subnets
	Subnets []getNetworkGetNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet `json:"subnets"`
}

// GetId returns getNetworkGetNetworkW1NetworkResponseMsgW1Network.Id, and is useful for accessing the field via an interface.
func (v *getNetworkGetNetworkW1NetworkResponseMsgW1Network) GetId() string { return v.Id }

// GetName returns getNetworkGetNetworkW1NetworkResponseMsgW1Network.Name, and is useful for accessing the field via an interface.
func (v *getNetworkGetNetworkW1NetworkResponseMsgW1Network) GetName() string { return v.Name }

// GetAvailabilityZone returns getNetworkGetNetworkW1NetworkResponseMsgW1Network.AvailabilityZone, and is useful for accessing the field via an interface.
func (v *getNetworkGetNetworkW1NetworkResponseMsgW1Network) GetAvailabilityZone() AvailabilityZone {
	return v.AvailabilityZone
}

// GetSubnets returns getNetworkGetNetworkW1NetworkResponseMsgW1Network.Subnets, and is useful for accessing the field via an interface.
func (v *getNetworkGetNetworkW1NetworkResponseMsgW1Network) GetSubnets() []getNetworkGetNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet {
	return v.Subnets
}

// getNetworkGetNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet includes the requested fields of the GraphQL type Subnet.
// The GraphQL type's documentation follows.
//
// Subnet
type getNetworkGetNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet struct {
	// ID
	Id string `json:"id"`
	// Name
	Name string `json:"name"`
	// IP Version
	IpVersion string `json:"ipVersion"`
	// CIDR
	Cidr string `json:"cidr"`
}

// GetId returns getNetworkGetNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet.Id, and is useful for accessing the field via an interface.
func (v *getNetworkGetNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet) GetId() string { return v.Id }

// GetName returns getNetworkGetNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet.Name, and is useful for accessing the field via an interface.
func (v *getNetworkGetNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet) GetName() string {
	return v.Name
}

// GetIpVersion returns getNetworkGetNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet.IpVersion, and is useful for accessing the field via an interface.
func (v *getNetworkGetNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet) GetIpVersion() string {
	return v.IpVersion
}

// GetCidr returns getNetworkGetNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet.Cidr, and is useful for accessing the field via an interface.
func (v *getNetworkGetNetworkW1NetworkResponseMsgW1NetworkSubnetsSubnet) GetCidr() string {
	return v.Cidr
}

// getNetworkResponse is returned by getNetwork on success.
type getNetworkResponse struct {
	// Get Network
	GetNetwork getNetworkGetNetworkW1NetworkResponse `json:"getNetwork"`
}

// GetGetNetwork returns getNetworkResponse.GetNetwork, and is useful for accessing the field via an interface.
func (v *getNetworkResponse) GetGetNetwork() getNetworkGetNetworkW1NetworkResponse {
	return v.GetNetwork
}

// meMeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// User
type meMeUser struct {
	// ID
	Id string `json:"id"`
	// Name
	Username string `json:"username"`
	// Role
	Role int `json:"role"`
}

// GetId returns meMeUser.Id, and is useful for accessing the field via an interface.
func (v *meMeUser) GetId() string { return v.Id }

// GetUsername returns meMeUser.Username, and is useful for accessing the field via an interface.
func (v *meMeUser) GetUsername() string { return v.Username }

// GetRole returns meMeUser.Role, and is useful for accessing the field via an interface.
func (v *meMeUser) GetRole() int { return v.Role }

// meResponse is returned by me on success.
type meResponse struct {
	// Get information about me
	Me meMeUser `json:"me"`
}

// GetMe returns meResponse.Me, and is useful for accessing the field via an interface.
func (v *meResponse) GetMe() meMeUser { return v.Me }

// updateKeyResponse is returned by updateKey on success.
type updateKeyResponse struct {
	// Update Key
	UpdateKey updateKeyUpdateKeyW1KeyResponse `json:"updateKey"`
}

// GetUpdateKey returns updateKeyResponse.UpdateKey, and is useful for accessing the field via an interface.
func (v *updateKeyResponse) GetUpdateKey() updateKeyUpdateKeyW1KeyResponse { return v.UpdateKey }

// updateKeyUpdateKeyW1KeyResponse includes the requested fields of the GraphQL type W1KeyResponse.
// The GraphQL type's documentation follows.
//
// Key Response
type updateKeyUpdateKeyW1KeyResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg updateKeyUpdateKeyW1KeyResponseMsgW1Key `json:"msg"`
}

// GetCode returns updateKeyUpdateKeyW1KeyResponse.Code, and is useful for accessing the field via an interface.
func (v *updateKeyUpdateKeyW1KeyResponse) GetCode() int { return v.Code }

// GetErr returns updateKeyUpdateKeyW1KeyResponse.Err, and is useful for accessing the field via an interface.
func (v *updateKeyUpdateKeyW1KeyResponse) GetErr() string { return v.Err }

// GetMsg returns updateKeyUpdateKeyW1KeyResponse.Msg, and is useful for accessing the field via an interface.
func (v *updateKeyUpdateKeyW1KeyResponse) GetMsg() updateKeyUpdateKeyW1KeyResponseMsgW1Key {
	return v.Msg
}

// updateKeyUpdateKeyW1KeyResponseMsgW1Key includes the requested fields of the GraphQL type W1Key.
// The GraphQL type's documentation follows.
//
// SSH Key
type updateKeyUpdateKeyW1KeyResponseMsgW1Key struct {
	// ID
	Id string `json:"id"`
}

// GetId returns updateKeyUpdateKeyW1KeyResponseMsgW1Key.Id, and is useful for accessing the field via an interface.
func (v *updateKeyUpdateKeyW1KeyResponseMsgW1Key) GetId() string { return v.Id }

// updateNetworkResponse is returned by updateNetwork on success.
type updateNetworkResponse struct {
	// Update Network
	UpdateNetwork updateNetworkUpdateNetworkW1NetworkResponse `json:"updateNetwork"`
}

// GetUpdateNetwork returns updateNetworkResponse.UpdateNetwork, and is useful for accessing the field via an interface.
func (v *updateNetworkResponse) GetUpdateNetwork() updateNetworkUpdateNetworkW1NetworkResponse {
	return v.UpdateNetwork
}

// updateNetworkUpdateNetworkW1NetworkResponse includes the requested fields of the GraphQL type W1NetworkResponse.
// The GraphQL type's documentation follows.
//
// Network Response
type updateNetworkUpdateNetworkW1NetworkResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg updateNetworkUpdateNetworkW1NetworkResponseMsgW1Network `json:"msg"`
}

// GetCode returns updateNetworkUpdateNetworkW1NetworkResponse.Code, and is useful for accessing the field via an interface.
func (v *updateNetworkUpdateNetworkW1NetworkResponse) GetCode() int { return v.Code }

// GetErr returns updateNetworkUpdateNetworkW1NetworkResponse.Err, and is useful for accessing the field via an interface.
func (v *updateNetworkUpdateNetworkW1NetworkResponse) GetErr() string { return v.Err }

// GetMsg returns updateNetworkUpdateNetworkW1NetworkResponse.Msg, and is useful for accessing the field via an interface.
func (v *updateNetworkUpdateNetworkW1NetworkResponse) GetMsg() updateNetworkUpdateNetworkW1NetworkResponseMsgW1Network {
	return v.Msg
}

// updateNetworkUpdateNetworkW1NetworkResponseMsgW1Network includes the requested fields of the GraphQL type W1Network.
// The GraphQL type's documentation follows.
//
// Network
type updateNetworkUpdateNetworkW1NetworkResponseMsgW1Network struct {
	// ID
	Id string `json:"id"`
}

// GetId returns updateNetworkUpdateNetworkW1NetworkResponseMsgW1Network.Id, and is useful for accessing the field via an interface.
func (v *updateNetworkUpdateNetworkW1NetworkResponseMsgW1Network) GetId() string { return v.Id }

// The query or mutation executed by createFloatingGroup.
const createFloatingGroup_Operation = `
mutation createFloatingGroup ($id: UUID!, $projectId: UUID!, $vms: [FloatingGroupVmInput], $natToVmsPrivateIp: Boolean) {
	createFloatingGroup(id: $id, projectId: $projectId, vms: $vms, natToVmsPrivateIp: $natToVmsPrivateIp) {
		code
		err
		msg {
			id
			vmId
		}
	}
}
`

func createFloatingGroup(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	projectId string,
	vms []FloatingGroupVmInput,
	natToVmsPrivateIp bool,
) (*createFloatingGroupResponse, error) {
	req_ := &graphql.Request{
		OpName: "createFloatingGroup",
		Query:  createFloatingGroup_Operation,
		Variables: &__createFloatingGroupInput{
			Id:                id,
			ProjectId:         projectId,
			Vms:               vms,
			NatToVmsPrivateIp: natToVmsPrivateIp,
		},
	}
	var err_ error

	var data_ createFloatingGroupResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createFloatingIP.
const createFloatingIP_Operation = `
mutation createFloatingIP ($projectId: UUID!) {
	createFloatingIP(projectId: $projectId) {
		code
		err
		msg {
			id
			ip
		}
	}
}
`

func createFloatingIP(
	ctx_ context.Context,
	client_ graphql.Client,
	projectId string,
) (*createFloatingIPResponse, error) {
	req_ := &graphql.Request{
		OpName: "createFloatingIP",
		Query:  createFloatingIP_Operation,
		Variables: &__createFloatingIPInput{
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ createFloatingIPResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createInstance.
const createInstance_Operation = `
mutation createInstance ($networkId: UUID!, $flavorId: UUID!, $imageId: UUID!, $projectId: UUID!, $name: String!, $sshKeys: [UUID!]!, $zone: AvailabilityZone!, $managed: Boolean!) {
	createInstance(flavor: $flavorId, image: $imageId, name: $name, networks: [$networkId], sshKeys: $sshKeys, projectId: $projectId, zone: $zone, managed: $managed) {
		code
		err
		msg {
			id
			status
		}
	}
}
`

func createInstance(
	ctx_ context.Context,
	client_ graphql.Client,
	networkId string,
	flavorId string,
	imageId string,
	projectId string,
	name string,
	sshKeys []string,
	zone AvailabilityZone,
	managed bool,
) (*createInstanceResponse, error) {
	req_ := &graphql.Request{
		OpName: "createInstance",
		Query:  createInstance_Operation,
		Variables: &__createInstanceInput{
			NetworkId: networkId,
			FlavorId:  flavorId,
			ImageId:   imageId,
			ProjectId: projectId,
			Name:      name,
			SshKeys:   sshKeys,
			Zone:      zone,
			Managed:   managed,
		},
	}
	var err_ error

	var data_ createInstanceResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createKey.
const createKey_Operation = `
mutation createKey ($name: String!, $publicKey: String!, $projectId: UUID, $projectWide: Boolean) {
	createKey(name: $name, publicKey: $publicKey, projectId: $projectId, projectWide: $projectWide) {
		code
		err
		msg {
			id
		}
	}
}
`

func createKey(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
	publicKey string,
	projectId string,
	projectWide bool,
) (*createKeyResponse, error) {
	req_ := &graphql.Request{
		OpName: "createKey",
		Query:  createKey_Operation,
		Variables: &__createKeyInput{
			Name:        name,
			PublicKey:   publicKey,
			ProjectId:   projectId,
			ProjectWide: projectWide,
		},
	}
	var err_ error

	var data_ createKeyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createNetwork.
const createNetwork_Operation = `
mutation createNetwork ($name: String!, $availabilityZone: AvailabilityZone, $projectId: UUID, $subnets: [SubnetInput]!) {
	createNetwork(projectId: $projectId, name: $name, availabilityZone: $availabilityZone, subnets: $subnets) {
		code
		err
		msg {
			id
			name
			subnets {
				cidr
				id
				name
			}
		}
	}
}
`

func createNetwork(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
	availabilityZone AvailabilityZone,
	projectId string,
	subnets []SubnetInput,
) (*createNetworkResponse, error) {
	req_ := &graphql.Request{
		OpName: "createNetwork",
		Query:  createNetwork_Operation,
		Variables: &__createNetworkInput{
			Name:             name,
			AvailabilityZone: availabilityZone,
			ProjectId:        projectId,
			Subnets:          subnets,
		},
	}
	var err_ error

	var data_ createNetworkResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteFloatingGroupByFloatingIpIdAndInstanceId.
const deleteFloatingGroupByFloatingIpIdAndInstanceId_Operation = `
mutation deleteFloatingGroupByFloatingIpIdAndInstanceId ($projectId: UUID!, $floatingIPId: UUID!, $instanceId: UUID!) {
	deleteFloatingGroupByFloatingIpIdAndInstanceId(projectId: $projectId, floatingIpId: $floatingIPId, instanceId: $instanceId) {
		err
		code
		msg
	}
}
`

func deleteFloatingGroupByFloatingIpIdAndInstanceId(
	ctx_ context.Context,
	client_ graphql.Client,
	projectId string,
	floatingIPId string,
	instanceId string,
) (*deleteFloatingGroupByFloatingIpIdAndInstanceIdResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteFloatingGroupByFloatingIpIdAndInstanceId",
		Query:  deleteFloatingGroupByFloatingIpIdAndInstanceId_Operation,
		Variables: &__deleteFloatingGroupByFloatingIpIdAndInstanceIdInput{
			ProjectId:    projectId,
			FloatingIPId: floatingIPId,
			InstanceId:   instanceId,
		},
	}
	var err_ error

	var data_ deleteFloatingGroupByFloatingIpIdAndInstanceIdResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteFloatingIP.
const deleteFloatingIP_Operation = `
mutation deleteFloatingIP ($id: UUID!, $projectId: UUID!) {
	deleteFloatingIP(id: $id, projectId: $projectId) {
		code
		err
		msg
	}
}
`

func deleteFloatingIP(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	projectId string,
) (*deleteFloatingIPResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteFloatingIP",
		Query:  deleteFloatingIP_Operation,
		Variables: &__deleteFloatingIPInput{
			Id:        id,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ deleteFloatingIPResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteInstance.
const deleteInstance_Operation = `
mutation deleteInstance ($id: UUID!, $projectId: UUID!) {
	deleteInstance(id: $id, projectId: $projectId) {
		code
		err
		msg {
			status
		}
	}
}
`

func deleteInstance(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	projectId string,
) (*deleteInstanceResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteInstance",
		Query:  deleteInstance_Operation,
		Variables: &__deleteInstanceInput{
			Id:        id,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ deleteInstanceResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteKey.
const deleteKey_Operation = `
mutation deleteKey ($id: UUID!, $projectId: UUID) {
	deleteKey(id: $id, projectId: $projectId) {
		code
		err
		msg
	}
}
`

func deleteKey(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	projectId string,
) (*deleteKeyResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteKey",
		Query:  deleteKey_Operation,
		Variables: &__deleteKeyInput{
			Id:        id,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ deleteKeyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteNetwork.
const deleteNetwork_Operation = `
mutation deleteNetwork ($id: UUID!, $projectId: UUID!) {
	deleteNetwork(id: $id, projectId: $projectId) {
		code
		err
		msg
	}
}
`

func deleteNetwork(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	projectId string,
) (*deleteNetworkResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteNetwork",
		Query:  deleteNetwork_Operation,
		Variables: &__deleteNetworkInput{
			Id:        id,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ deleteNetworkResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getDefaultProject.
const getDefaultProject_Operation = `
query getDefaultProject {
	getDefaultProject {
		code
		err
		msg {
			id
			name
		}
	}
}
`

func getDefaultProject(
	ctx_ context.Context,
	client_ graphql.Client,
) (*getDefaultProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "getDefaultProject",
		Query:  getDefaultProject_Operation,
	}
	var err_ error

	var data_ getDefaultProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getFlavorByName.
const getFlavorByName_Operation = `
query getFlavorByName ($name: String!) {
	getFlavorByName(name: $name) {
		code
		err
		msg {
			id
		}
	}
}
`

func getFlavorByName(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
) (*getFlavorByNameResponse, error) {
	req_ := &graphql.Request{
		OpName: "getFlavorByName",
		Query:  getFlavorByName_Operation,
		Variables: &__getFlavorByNameInput{
			Name: name,
		},
	}
	var err_ error

	var data_ getFlavorByNameResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getFloatingIP.
const getFloatingIP_Operation = `
query getFloatingIP ($id: UUID!, $projectId: UUID!) {
	getFloatingIP(id: $id, projectId: $projectId) {
		code
		err
		msg {
			ip
		}
	}
}
`

func getFloatingIP(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	projectId string,
) (*getFloatingIPResponse, error) {
	req_ := &graphql.Request{
		OpName: "getFloatingIP",
		Query:  getFloatingIP_Operation,
		Variables: &__getFloatingIPInput{
			Id:        id,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ getFloatingIPResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getFloatingIPAttachment.
const getFloatingIPAttachment_Operation = `
query getFloatingIPAttachment ($id: UUID!, $projectId: UUID!) {
	getFloatingIPAttachment(id: $id, projectId: $projectId) {
		code
		err
		msg {
			__typename
			... on FloatingIPInstanceAttachment {
				natToVmsPrivateIp
				vms {
					id
					priority
					vmId
				}
			}
		}
	}
}
`

func getFloatingIPAttachment(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	projectId string,
) (*getFloatingIPAttachmentResponse, error) {
	req_ := &graphql.Request{
		OpName: "getFloatingIPAttachment",
		Query:  getFloatingIPAttachment_Operation,
		Variables: &__getFloatingIPAttachmentInput{
			Id:        id,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ getFloatingIPAttachmentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getImageList.
const getImageList_Operation = `
query getImageList ($projectId: UUID!) {
	getImageList(projectId: $projectId) {
		code
		err
		msg {
			id
			name
		}
	}
}
`

func getImageList(
	ctx_ context.Context,
	client_ graphql.Client,
	projectId string,
) (*getImageListResponse, error) {
	req_ := &graphql.Request{
		OpName: "getImageList",
		Query:  getImageList_Operation,
		Variables: &__getImageListInput{
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ getImageListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getInstance.
const getInstance_Operation = `
query getInstance ($id: UUID!, $projectId: UUID!) {
	getInstance(id: $id, projectId: $projectId) {
		code
		err
		msg {
			id
			name
			status
			availabilityZone
			flavorId
		}
	}
}
`

func getInstance(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	projectId string,
) (*getInstanceResponse, error) {
	req_ := &graphql.Request{
		OpName: "getInstance",
		Query:  getInstance_Operation,
		Variables: &__getInstanceInput{
			Id:        id,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ getInstanceResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getKey.
const getKey_Operation = `
query getKey ($id: UUID, $name: String, $projectId: UUID, $projectWide: Boolean) {
	getKey(id: $id, name: $name, projectId: $projectId, projectWide: $projectWide) {
		code
		err
		msg {
			id
			name
			publicKey
			projectWide
		}
	}
}
`

func getKey(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	name string,
	projectId string,
	projectWide *bool,
) (*getKeyResponse, error) {
	req_ := &graphql.Request{
		OpName: "getKey",
		Query:  getKey_Operation,
		Variables: &__getKeyInput{
			Id:          id,
			Name:        name,
			ProjectId:   projectId,
			ProjectWide: projectWide,
		},
	}
	var err_ error

	var data_ getKeyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getNetwork.
const getNetwork_Operation = `
query getNetwork ($id: UUID!, $projectId: UUID!) {
	getNetwork(id: $id, projectId: $projectId) {
		code
		err
		msg {
			id
			name
			availabilityZone
			subnets {
				id
				name
				ipVersion
				cidr
			}
		}
	}
}
`

func getNetwork(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	projectId string,
) (*getNetworkResponse, error) {
	req_ := &graphql.Request{
		OpName: "getNetwork",
		Query:  getNetwork_Operation,
		Variables: &__getNetworkInput{
			Id:        id,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ getNetworkResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by me.
const me_Operation = `
query me {
	me {
		id
		username
		role
	}
}
`

func me(
	ctx_ context.Context,
	client_ graphql.Client,
) (*meResponse, error) {
	req_ := &graphql.Request{
		OpName: "me",
		Query:  me_Operation,
	}
	var err_ error

	var data_ meResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateKey.
const updateKey_Operation = `
mutation updateKey ($id: UUID!, $projectId: UUID, $name: String!) {
	updateKey(id: $id, name: $name, projectId: $projectId) {
		code
		err
		msg {
			id
		}
	}
}
`

func updateKey(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	projectId string,
	name string,
) (*updateKeyResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateKey",
		Query:  updateKey_Operation,
		Variables: &__updateKeyInput{
			Id:        id,
			ProjectId: projectId,
			Name:      name,
		},
	}
	var err_ error

	var data_ updateKeyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateNetwork.
const updateNetwork_Operation = `
mutation updateNetwork ($id: UUID!, $projectId: UUID, $name: String!) {
	updateNetwork(id: $id, name: $name, projectId: $projectId) {
		code
		err
		msg {
			id
		}
	}
}
`

func updateNetwork(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	projectId string,
	name string,
) (*updateNetworkResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateNetwork",
		Query:  updateNetwork_Operation,
		Variables: &__updateNetworkInput{
			Id:        id,
			ProjectId: projectId,
			Name:      name,
		},
	}
	var err_ error

	var data_ updateNetworkResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
