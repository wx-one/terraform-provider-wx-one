// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package provider

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/google/uuid"
)

// meMeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// User
type meMeUser struct {
	// ID
	Id uuid.UUID `json:"id"`
	// Name
	Username string `json:"username"`
	// Role
	Role int `json:"role"`
}

// GetId returns meMeUser.Id, and is useful for accessing the field via an interface.
func (v *meMeUser) GetId() uuid.UUID { return v.Id }

// GetUsername returns meMeUser.Username, and is useful for accessing the field via an interface.
func (v *meMeUser) GetUsername() string { return v.Username }

// GetRole returns meMeUser.Role, and is useful for accessing the field via an interface.
func (v *meMeUser) GetRole() int { return v.Role }

// meResponse is returned by me on success.
type meResponse struct {
	// Get information about me
	Me meMeUser `json:"me"`
}

// GetMe returns meResponse.Me, and is useful for accessing the field via an interface.
func (v *meResponse) GetMe() meMeUser { return v.Me }

// The query or mutation executed by me.
const me_Operation = `
query me {
	me {
		id
		username
		role
	}
}
`

func me(
	ctx_ context.Context,
	client_ graphql.Client,
) (*meResponse, error) {
	req_ := &graphql.Request{
		OpName: "me",
		Query:  me_Operation,
	}
	var err_ error

	var data_ meResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
