// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package provider

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// getDefaultProjectGetDefaultProjectProjectResponse includes the requested fields of the GraphQL type ProjectResponse.
// The GraphQL type's documentation follows.
//
// ProjectResponse
type getDefaultProjectGetDefaultProjectProjectResponse struct {
	// Return Code
	Code int `json:"code"`
	// Error Message
	Err string `json:"err"`
	// Success Message
	Msg getDefaultProjectGetDefaultProjectProjectResponseMsgProject `json:"msg"`
}

// GetCode returns getDefaultProjectGetDefaultProjectProjectResponse.Code, and is useful for accessing the field via an interface.
func (v *getDefaultProjectGetDefaultProjectProjectResponse) GetCode() int { return v.Code }

// GetErr returns getDefaultProjectGetDefaultProjectProjectResponse.Err, and is useful for accessing the field via an interface.
func (v *getDefaultProjectGetDefaultProjectProjectResponse) GetErr() string { return v.Err }

// GetMsg returns getDefaultProjectGetDefaultProjectProjectResponse.Msg, and is useful for accessing the field via an interface.
func (v *getDefaultProjectGetDefaultProjectProjectResponse) GetMsg() getDefaultProjectGetDefaultProjectProjectResponseMsgProject {
	return v.Msg
}

// getDefaultProjectGetDefaultProjectProjectResponseMsgProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// Project
type getDefaultProjectGetDefaultProjectProjectResponseMsgProject struct {
	// ID
	Id string `json:"id"`
	// Name
	Name string `json:"name"`
}

// GetId returns getDefaultProjectGetDefaultProjectProjectResponseMsgProject.Id, and is useful for accessing the field via an interface.
func (v *getDefaultProjectGetDefaultProjectProjectResponseMsgProject) GetId() string { return v.Id }

// GetName returns getDefaultProjectGetDefaultProjectProjectResponseMsgProject.Name, and is useful for accessing the field via an interface.
func (v *getDefaultProjectGetDefaultProjectProjectResponseMsgProject) GetName() string { return v.Name }

// getDefaultProjectResponse is returned by getDefaultProject on success.
type getDefaultProjectResponse struct {
	// Get Default Project
	GetDefaultProject getDefaultProjectGetDefaultProjectProjectResponse `json:"getDefaultProject"`
}

// GetGetDefaultProject returns getDefaultProjectResponse.GetDefaultProject, and is useful for accessing the field via an interface.
func (v *getDefaultProjectResponse) GetGetDefaultProject() getDefaultProjectGetDefaultProjectProjectResponse {
	return v.GetDefaultProject
}

// meMeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// User
type meMeUser struct {
	// ID
	Id string `json:"id"`
	// Name
	Username string `json:"username"`
	// Role
	Role int `json:"role"`
}

// GetId returns meMeUser.Id, and is useful for accessing the field via an interface.
func (v *meMeUser) GetId() string { return v.Id }

// GetUsername returns meMeUser.Username, and is useful for accessing the field via an interface.
func (v *meMeUser) GetUsername() string { return v.Username }

// GetRole returns meMeUser.Role, and is useful for accessing the field via an interface.
func (v *meMeUser) GetRole() int { return v.Role }

// meResponse is returned by me on success.
type meResponse struct {
	// Get information about me
	Me meMeUser `json:"me"`
}

// GetMe returns meResponse.Me, and is useful for accessing the field via an interface.
func (v *meResponse) GetMe() meMeUser { return v.Me }

// The query or mutation executed by getDefaultProject.
const getDefaultProject_Operation = `
query getDefaultProject {
	getDefaultProject {
		code
		err
		msg {
			id
			name
		}
	}
}
`

func getDefaultProject(
	ctx_ context.Context,
	client_ graphql.Client,
) (*getDefaultProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "getDefaultProject",
		Query:  getDefaultProject_Operation,
	}
	var err_ error

	var data_ getDefaultProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by me.
const me_Operation = `
query me {
	me {
		id
		username
		role
	}
}
`

func me(
	ctx_ context.Context,
	client_ graphql.Client,
) (*meResponse, error) {
	req_ := &graphql.Request{
		OpName: "me",
		Query:  me_Operation,
	}
	var err_ error

	var data_ meResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
